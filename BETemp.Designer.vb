'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4952
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("BETemp"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class BETemp
    Inherits Global.System.Data.DataSet
    
    Private tablebe As beDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("be")) Is Nothing) Then
                MyBase.Tables.Add(New beDataTable(ds.Tables("be")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property be() As beDataTable
        Get
            Return Me.tablebe
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As BETemp = CType(MyBase.Clone,BETemp)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("be")) Is Nothing) Then
                MyBase.Tables.Add(New beDataTable(ds.Tables("be")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablebe = CType(MyBase.Tables("be"),beDataTable)
        If (initTable = true) Then
            If (Not (Me.tablebe) Is Nothing) Then
                Me.tablebe.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "BETemp"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/BETemp.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablebe = New beDataTable
        MyBase.Tables.Add(Me.tablebe)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializebe() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As BETemp = New BETemp
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub beRowChangeEventHandler(ByVal sender As Object, ByVal e As beRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class beDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnB_name As Global.System.Data.DataColumn
        
        Private columnB_type As Global.System.Data.DataColumn
        
        Private columnB_level As Global.System.Data.DataColumn
        
        Private columnB_strength As Global.System.Data.DataColumn
        
        Private columnB_attacks As Global.System.Data.DataColumn
        
        Private columnB_dexterity As Global.System.Data.DataColumn
        
        Private columnB_defences As Global.System.Data.DataColumn
        
        Private columnB_specattacks As Global.System.Data.DataColumn
        
        Private columnB_specdefences As Global.System.Data.DataColumn
        
        Private columnB_size As Global.System.Data.DataColumn
        
        Private columnB_fodl As Global.System.Data.DataColumn
        
        Private columnB_resistances As Global.System.Data.DataColumn
        
        Private columnB_IQ As Global.System.Data.DataColumn
        
        Private columnB_wisdom As Global.System.Data.DataColumn
        
        Private columnB_skill As Global.System.Data.DataColumn
        
        Private columnB_podl As Global.System.Data.DataColumn
        
        Private columnB_jed As Global.System.Data.DataColumn
        
        Private columnB_MG As Global.System.Data.DataColumn
        
        Private columnB_maxspelltype As Global.System.Data.DataColumn
        
        Private columnB_mental As Global.System.Data.DataColumn
        
        Private columnB_mentalskills As Global.System.Data.DataColumn
        
        Private columnB_speed As Global.System.Data.DataColumn
        
        Private columnB_behavior As Global.System.Data.DataColumn
        
        Private columnB_experience As Global.System.Data.DataColumn
        
        Private columnB_treasures As Global.System.Data.DataColumn
        
        Private columnB_popis As Global.System.Data.DataColumn
        
        Private columnB_datecreated As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "be"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_levelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_level
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_strengthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_strength
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_attacksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_attacks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_dexterityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_dexterity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_defencesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_defences
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_specattacksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_specattacks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_specdefencesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_specdefences
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_sizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_size
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_fodlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_fodl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_resistancesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_resistances
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_IQColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_IQ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_wisdomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_wisdom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_skillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_skill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_podlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_podl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_jedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_jed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_MGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_MG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_maxspelltypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_maxspelltype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_mentalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_mental
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_mentalskillsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_mentalskills
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_speedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_speed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_behaviorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_behavior
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_experienceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_experience
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_treasuresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_treasures
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_popisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_popis
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property B_datecreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_datecreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As beRow
            Get
                Return CType(Me.Rows(index),beRow)
            End Get
        End Property
        
        Public Event beRowChanging As beRowChangeEventHandler
        
        Public Event beRowChanged As beRowChangeEventHandler
        
        Public Event beRowDeleting As beRowChangeEventHandler
        
        Public Event beRowDeleted As beRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddbeRow(ByVal row As beRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddbeRow( _
                    ByVal B_name As String,  _
                    ByVal B_type As String,  _
                    ByVal B_level As String,  _
                    ByVal B_strength As String,  _
                    ByVal B_attacks As String,  _
                    ByVal B_dexterity As String,  _
                    ByVal B_defences As String,  _
                    ByVal B_specattacks As String,  _
                    ByVal B_specdefences As String,  _
                    ByVal B_size As String,  _
                    ByVal B_fodl As String,  _
                    ByVal B_resistances As String,  _
                    ByVal B_IQ As String,  _
                    ByVal B_wisdom As String,  _
                    ByVal B_skill As String,  _
                    ByVal B_podl As String,  _
                    ByVal B_jed As String,  _
                    ByVal B_MG As String,  _
                    ByVal B_maxspelltype As String,  _
                    ByVal B_mental As String,  _
                    ByVal B_mentalskills As String,  _
                    ByVal B_speed As String,  _
                    ByVal B_behavior As String,  _
                    ByVal B_experience As String,  _
                    ByVal B_treasures As String,  _
                    ByVal B_popis As String,  _
                    ByVal B_datecreated As Date) As beRow
            Dim rowbeRow As beRow = CType(Me.NewRow,beRow)
            Dim columnValuesArray() As Object = New Object() {B_name, B_type, B_level, B_strength, B_attacks, B_dexterity, B_defences, B_specattacks, B_specdefences, B_size, B_fodl, B_resistances, B_IQ, B_wisdom, B_skill, B_podl, B_jed, B_MG, B_maxspelltype, B_mental, B_mentalskills, B_speed, B_behavior, B_experience, B_treasures, B_popis, B_datecreated}
            rowbeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowbeRow)
            Return rowbeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As beDataTable = CType(MyBase.Clone,beDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New beDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnB_name = MyBase.Columns("B_name")
            Me.columnB_type = MyBase.Columns("B_type")
            Me.columnB_level = MyBase.Columns("B_level")
            Me.columnB_strength = MyBase.Columns("B_strength")
            Me.columnB_attacks = MyBase.Columns("B_attacks")
            Me.columnB_dexterity = MyBase.Columns("B_dexterity")
            Me.columnB_defences = MyBase.Columns("B_defences")
            Me.columnB_specattacks = MyBase.Columns("B_specattacks")
            Me.columnB_specdefences = MyBase.Columns("B_specdefences")
            Me.columnB_size = MyBase.Columns("B_size")
            Me.columnB_fodl = MyBase.Columns("B_fodl")
            Me.columnB_resistances = MyBase.Columns("B_resistances")
            Me.columnB_IQ = MyBase.Columns("B_IQ")
            Me.columnB_wisdom = MyBase.Columns("B_wisdom")
            Me.columnB_skill = MyBase.Columns("B_skill")
            Me.columnB_podl = MyBase.Columns("B_podl")
            Me.columnB_jed = MyBase.Columns("B_jed")
            Me.columnB_MG = MyBase.Columns("B_MG")
            Me.columnB_maxspelltype = MyBase.Columns("B_maxspelltype")
            Me.columnB_mental = MyBase.Columns("B_mental")
            Me.columnB_mentalskills = MyBase.Columns("B_mentalskills")
            Me.columnB_speed = MyBase.Columns("B_speed")
            Me.columnB_behavior = MyBase.Columns("B_behavior")
            Me.columnB_experience = MyBase.Columns("B_experience")
            Me.columnB_treasures = MyBase.Columns("B_treasures")
            Me.columnB_popis = MyBase.Columns("B_popis")
            Me.columnB_datecreated = MyBase.Columns("B_datecreated")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnB_name = New Global.System.Data.DataColumn("B_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_name)
            Me.columnB_type = New Global.System.Data.DataColumn("B_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_type)
            Me.columnB_level = New Global.System.Data.DataColumn("B_level", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_level)
            Me.columnB_strength = New Global.System.Data.DataColumn("B_strength", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_strength)
            Me.columnB_attacks = New Global.System.Data.DataColumn("B_attacks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_attacks)
            Me.columnB_dexterity = New Global.System.Data.DataColumn("B_dexterity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_dexterity)
            Me.columnB_defences = New Global.System.Data.DataColumn("B_defences", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_defences)
            Me.columnB_specattacks = New Global.System.Data.DataColumn("B_specattacks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_specattacks)
            Me.columnB_specdefences = New Global.System.Data.DataColumn("B_specdefences", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_specdefences)
            Me.columnB_size = New Global.System.Data.DataColumn("B_size", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_size)
            Me.columnB_fodl = New Global.System.Data.DataColumn("B_fodl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_fodl)
            Me.columnB_resistances = New Global.System.Data.DataColumn("B_resistances", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_resistances)
            Me.columnB_IQ = New Global.System.Data.DataColumn("B_IQ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_IQ)
            Me.columnB_wisdom = New Global.System.Data.DataColumn("B_wisdom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_wisdom)
            Me.columnB_skill = New Global.System.Data.DataColumn("B_skill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_skill)
            Me.columnB_podl = New Global.System.Data.DataColumn("B_podl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_podl)
            Me.columnB_jed = New Global.System.Data.DataColumn("B_jed", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_jed)
            Me.columnB_MG = New Global.System.Data.DataColumn("B_MG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_MG)
            Me.columnB_maxspelltype = New Global.System.Data.DataColumn("B_maxspelltype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_maxspelltype)
            Me.columnB_mental = New Global.System.Data.DataColumn("B_mental", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_mental)
            Me.columnB_mentalskills = New Global.System.Data.DataColumn("B_mentalskills", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_mentalskills)
            Me.columnB_speed = New Global.System.Data.DataColumn("B_speed", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_speed)
            Me.columnB_behavior = New Global.System.Data.DataColumn("B_behavior", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_behavior)
            Me.columnB_experience = New Global.System.Data.DataColumn("B_experience", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_experience)
            Me.columnB_treasures = New Global.System.Data.DataColumn("B_treasures", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_treasures)
            Me.columnB_popis = New Global.System.Data.DataColumn("B_popis", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_popis)
            Me.columnB_datecreated = New Global.System.Data.DataColumn("B_datecreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_datecreated)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewbeRow() As beRow
            Return CType(Me.NewRow,beRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New beRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(beRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.beRowChangedEvent) Is Nothing) Then
                RaiseEvent beRowChanged(Me, New beRowChangeEvent(CType(e.Row,beRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.beRowChangingEvent) Is Nothing) Then
                RaiseEvent beRowChanging(Me, New beRowChangeEvent(CType(e.Row,beRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.beRowDeletedEvent) Is Nothing) Then
                RaiseEvent beRowDeleted(Me, New beRowChangeEvent(CType(e.Row,beRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.beRowDeletingEvent) Is Nothing) Then
                RaiseEvent beRowDeleting(Me, New beRowChangeEvent(CType(e.Row,beRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovebeRow(ByVal row As beRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As BETemp = New BETemp
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "beDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class beRow
        Inherits Global.System.Data.DataRow
        
        Private tablebe As beDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablebe = CType(Me.Table,beDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_name' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_type() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_type' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_level() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_levelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_level' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_levelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_strength() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_strengthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_strength' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_strengthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_attacks() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_attacksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_attacks' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_attacksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_dexterity() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_dexterityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_dexterity' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_dexterityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_defences() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_defencesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_defences' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_defencesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_specattacks() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_specattacksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_specattacks' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_specattacksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_specdefences() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_specdefencesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_specdefences' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_specdefencesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_size() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_sizeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_size' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_sizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_fodl() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_fodlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_fodl' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_fodlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_resistances() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_resistancesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_resistances' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_resistancesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_IQ() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_IQColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_IQ' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_IQColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_wisdom() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_wisdomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_wisdom' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_wisdomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_skill() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_skillColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_skill' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_skillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_podl() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_podlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_podl' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_podlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_jed() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_jedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_jed' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_jedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_MG() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_MGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_MG' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_MGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_maxspelltype() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_maxspelltypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_maxspelltype' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_maxspelltypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_mental() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_mentalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_mental' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_mentalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_mentalskills() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_mentalskillsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_mentalskills' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_mentalskillsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_speed() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_speedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_speed' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_speedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_behavior() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_behaviorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_behavior' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_behaviorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_experience() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_experienceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_experience' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_experienceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_treasures() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_treasuresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_treasures' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_treasuresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_popis() As String
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_popisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_popis' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_popisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property B_datecreated() As Date
            Get
                Try 
                    Return CType(Me(Me.tablebe.B_datecreatedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'B_datecreated' in table 'be' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebe.B_datecreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_nameNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_nameNull()
            Me(Me.tablebe.B_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_typeNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_typeNull()
            Me(Me.tablebe.B_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_levelNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_levelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_levelNull()
            Me(Me.tablebe.B_levelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_strengthNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_strengthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_strengthNull()
            Me(Me.tablebe.B_strengthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_attacksNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_attacksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_attacksNull()
            Me(Me.tablebe.B_attacksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_dexterityNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_dexterityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_dexterityNull()
            Me(Me.tablebe.B_dexterityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_defencesNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_defencesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_defencesNull()
            Me(Me.tablebe.B_defencesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_specattacksNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_specattacksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_specattacksNull()
            Me(Me.tablebe.B_specattacksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_specdefencesNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_specdefencesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_specdefencesNull()
            Me(Me.tablebe.B_specdefencesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_sizeNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_sizeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_sizeNull()
            Me(Me.tablebe.B_sizeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_fodlNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_fodlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_fodlNull()
            Me(Me.tablebe.B_fodlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_resistancesNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_resistancesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_resistancesNull()
            Me(Me.tablebe.B_resistancesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_IQNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_IQColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_IQNull()
            Me(Me.tablebe.B_IQColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_wisdomNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_wisdomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_wisdomNull()
            Me(Me.tablebe.B_wisdomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_skillNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_skillColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_skillNull()
            Me(Me.tablebe.B_skillColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_podlNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_podlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_podlNull()
            Me(Me.tablebe.B_podlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_jedNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_jedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_jedNull()
            Me(Me.tablebe.B_jedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_MGNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_MGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_MGNull()
            Me(Me.tablebe.B_MGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_maxspelltypeNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_maxspelltypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_maxspelltypeNull()
            Me(Me.tablebe.B_maxspelltypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_mentalNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_mentalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_mentalNull()
            Me(Me.tablebe.B_mentalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_mentalskillsNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_mentalskillsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_mentalskillsNull()
            Me(Me.tablebe.B_mentalskillsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_speedNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_speedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_speedNull()
            Me(Me.tablebe.B_speedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_behaviorNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_behaviorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_behaviorNull()
            Me(Me.tablebe.B_behaviorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_experienceNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_experienceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_experienceNull()
            Me(Me.tablebe.B_experienceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_treasuresNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_treasuresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_treasuresNull()
            Me(Me.tablebe.B_treasuresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_popisNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_popisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_popisNull()
            Me(Me.tablebe.B_popisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsB_datecreatedNull() As Boolean
            Return Me.IsNull(Me.tablebe.B_datecreatedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetB_datecreatedNull()
            Me(Me.tablebe.B_datecreatedColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class beRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As beRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As beRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As beRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
