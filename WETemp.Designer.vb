'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4952
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("WETemp"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class WETemp
    Inherits Global.System.Data.DataSet
    
    Private tableWe As WeDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("We")) Is Nothing) Then
                MyBase.Tables.Add(New WeDataTable(ds.Tables("We")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property We() As WeDataTable
        Get
            Return Me.tableWe
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As WETemp = CType(MyBase.Clone,WETemp)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("We")) Is Nothing) Then
                MyBase.Tables.Add(New WeDataTable(ds.Tables("We")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableWe = CType(MyBase.Tables("We"),WeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWe) Is Nothing) Then
                Me.tableWe.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "WETemp"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/WETemp.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableWe = New WeDataTable
        MyBase.Tables.Add(Me.tableWe)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeWe() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As WETemp = New WETemp
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub WeRowChangeEventHandler(ByVal sender As Object, ByVal e As WeRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WeDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnWeap_name As Global.System.Data.DataColumn
        
        Private columnTypeg As Global.System.Data.DataColumn
        
        Private columnTemplatex As Global.System.Data.DataColumn
        
        Private columnZas As Global.System.Data.DataColumn
        
        Private columnPru As Global.System.Data.DataColumn
        
        Private columnDrt As Global.System.Data.DataColumn
        
        Private columnNic As Global.System.Data.DataColumn
        
        Private columnOC As Global.System.Data.DataColumn
        
        Private columnIni As Global.System.Data.DataColumn
        
        Private columnSpec_dmg As Global.System.Data.DataColumn
        
        Private columnDelk As Global.System.Data.DataColumn
        
        Private columnSilmin As Global.System.Data.DataColumn
        
        Private columnZas2 As Global.System.Data.DataColumn
        
        Private columnZas3 As Global.System.Data.DataColumn
        
        Private columnRang As Global.System.Data.DataColumn
        
        Private columnRang2 As Global.System.Data.DataColumn
        
        Private columnRang3 As Global.System.Data.DataColumn
        
        Private columnBod As Global.System.Data.DataColumn
        
        Private columnSek As Global.System.Data.DataColumn
        
        Private columnDrc As Global.System.Data.DataColumn
        
        Private columnOmg As Global.System.Data.DataColumn
        
        Private columnMag As Global.System.Data.DataColumn
        
        Private columnHP As Global.System.Data.DataColumn
        
        Private columnWeight As Global.System.Data.DataColumn
        
        Private columnAweight As Global.System.Data.DataColumn
        
        Private columnTyped As Global.System.Data.DataColumn
        
        Private columnDemon As Global.System.Data.DataColumn
        
        Private columnEnch As Global.System.Data.DataColumn
        
        Private columnBless As Global.System.Data.DataColumn
        
        Private columnMaterial As Global.System.Data.DataColumn
        
        Private columnLooking As Global.System.Data.DataColumn
        
        Private columnSpec_powers As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnDaily_MG As Global.System.Data.DataColumn
        
        Private columnEP_SP As Global.System.Data.DataColumn
        
        Private columnEP_SP_type As Global.System.Data.DataColumn
        
        Private columnRarity As Global.System.Data.DataColumn
        
        Private columnApp_price As Global.System.Data.DataColumn
        
        Private columnSpelly As Global.System.Data.DataColumn
        
        Private columnSkilly As Global.System.Data.DataColumn
        
        Private columnResky As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "We"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Weap_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeap_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypegColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TemplatexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTemplatex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PruColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPru
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DrtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDrt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NicColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNic
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IniColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIni
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Spec_dmgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpec_dmg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DelkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SilminColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSilmin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Zas2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnZas2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Zas3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnZas3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RangColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRang
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Rang2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRang2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Rang3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRang3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SekColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSek
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DrcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDrc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OmgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOmg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WeightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AweightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAweight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTyped
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DemonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDemon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnch
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BlessColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBless
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LookingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLooking
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Spec_powersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpec_powers
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Daily_MGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDaily_MG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EP_SPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEP_SP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EP_SP_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEP_SP_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RarityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRarity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property App_priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApp_price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SpellyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpelly
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SkillyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSkilly
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReskyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResky
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WeRow
            Get
                Return CType(Me.Rows(index),WeRow)
            End Get
        End Property
        
        Public Event WeRowChanging As WeRowChangeEventHandler
        
        Public Event WeRowChanged As WeRowChangeEventHandler
        
        Public Event WeRowDeleting As WeRowChangeEventHandler
        
        Public Event WeRowDeleted As WeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddWeRow(ByVal row As WeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddWeRow( _
                    ByVal ID As Double,  _
                    ByVal Weap_name As String,  _
                    ByVal Typeg As String,  _
                    ByVal Templatex As String,  _
                    ByVal Zas As String,  _
                    ByVal Pru As String,  _
                    ByVal Drt As String,  _
                    ByVal Nic As String,  _
                    ByVal OC As String,  _
                    ByVal Ini As String,  _
                    ByVal Spec_dmg As String,  _
                    ByVal Delk As String,  _
                    ByVal Silmin As String,  _
                    ByVal Zas2 As String,  _
                    ByVal Zas3 As String,  _
                    ByVal Rang As String,  _
                    ByVal Rang2 As String,  _
                    ByVal Rang3 As String,  _
                    ByVal Bod As String,  _
                    ByVal Sek As String,  _
                    ByVal Drc As String,  _
                    ByVal Omg As String,  _
                    ByVal Mag As String,  _
                    ByVal HP As String,  _
                    ByVal Weight As String,  _
                    ByVal Aweight As String,  _
                    ByVal Typed As String,  _
                    ByVal Demon As String,  _
                    ByVal Ench As String,  _
                    ByVal Bless As String,  _
                    ByVal Material As String,  _
                    ByVal Looking As String,  _
                    ByVal Spec_powers As String,  _
                    ByVal Remarks As String,  _
                    ByVal Daily_MG As String,  _
                    ByVal EP_SP As String,  _
                    ByVal EP_SP_type As String,  _
                    ByVal Rarity As String,  _
                    ByVal App_price As String,  _
                    ByVal Spelly As String,  _
                    ByVal Skilly As String,  _
                    ByVal Resky As String) As WeRow
            Dim rowWeRow As WeRow = CType(Me.NewRow,WeRow)
            Dim columnValuesArray() As Object = New Object() {ID, Weap_name, Typeg, Templatex, Zas, Pru, Drt, Nic, OC, Ini, Spec_dmg, Delk, Silmin, Zas2, Zas3, Rang, Rang2, Rang3, Bod, Sek, Drc, Omg, Mag, HP, Weight, Aweight, Typed, Demon, Ench, Bless, Material, Looking, Spec_powers, Remarks, Daily_MG, EP_SP, EP_SP_type, Rarity, App_price, Spelly, Skilly, Resky}
            rowWeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWeRow)
            Return rowWeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WeDataTable = CType(MyBase.Clone,WeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnWeap_name = MyBase.Columns("Weap_name")
            Me.columnTypeg = MyBase.Columns("Typeg")
            Me.columnTemplatex = MyBase.Columns("Templatex")
            Me.columnZas = MyBase.Columns("Zas")
            Me.columnPru = MyBase.Columns("Pru")
            Me.columnDrt = MyBase.Columns("Drt")
            Me.columnNic = MyBase.Columns("Nic")
            Me.columnOC = MyBase.Columns("OC")
            Me.columnIni = MyBase.Columns("Ini")
            Me.columnSpec_dmg = MyBase.Columns("Spec_dmg")
            Me.columnDelk = MyBase.Columns("Delk")
            Me.columnSilmin = MyBase.Columns("Silmin")
            Me.columnZas2 = MyBase.Columns("Zas2")
            Me.columnZas3 = MyBase.Columns("Zas3")
            Me.columnRang = MyBase.Columns("Rang")
            Me.columnRang2 = MyBase.Columns("Rang2")
            Me.columnRang3 = MyBase.Columns("Rang3")
            Me.columnBod = MyBase.Columns("Bod")
            Me.columnSek = MyBase.Columns("Sek")
            Me.columnDrc = MyBase.Columns("Drc")
            Me.columnOmg = MyBase.Columns("Omg")
            Me.columnMag = MyBase.Columns("Mag")
            Me.columnHP = MyBase.Columns("HP")
            Me.columnWeight = MyBase.Columns("Weight")
            Me.columnAweight = MyBase.Columns("Aweight")
            Me.columnTyped = MyBase.Columns("Typed")
            Me.columnDemon = MyBase.Columns("Demon")
            Me.columnEnch = MyBase.Columns("Ench")
            Me.columnBless = MyBase.Columns("Bless")
            Me.columnMaterial = MyBase.Columns("Material")
            Me.columnLooking = MyBase.Columns("Looking")
            Me.columnSpec_powers = MyBase.Columns("Spec_powers")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnDaily_MG = MyBase.Columns("Daily_MG")
            Me.columnEP_SP = MyBase.Columns("EP_SP")
            Me.columnEP_SP_type = MyBase.Columns("EP_SP_type")
            Me.columnRarity = MyBase.Columns("Rarity")
            Me.columnApp_price = MyBase.Columns("App_price")
            Me.columnSpelly = MyBase.Columns("Spelly")
            Me.columnSkilly = MyBase.Columns("Skilly")
            Me.columnResky = MyBase.Columns("Resky")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnWeap_name = New Global.System.Data.DataColumn("Weap_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeap_name)
            Me.columnTypeg = New Global.System.Data.DataColumn("Typeg", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeg)
            Me.columnTemplatex = New Global.System.Data.DataColumn("Templatex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemplatex)
            Me.columnZas = New Global.System.Data.DataColumn("Zas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZas)
            Me.columnPru = New Global.System.Data.DataColumn("Pru", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPru)
            Me.columnDrt = New Global.System.Data.DataColumn("Drt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDrt)
            Me.columnNic = New Global.System.Data.DataColumn("Nic", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNic)
            Me.columnOC = New Global.System.Data.DataColumn("OC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOC)
            Me.columnIni = New Global.System.Data.DataColumn("Ini", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIni)
            Me.columnSpec_dmg = New Global.System.Data.DataColumn("Spec_dmg", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpec_dmg)
            Me.columnDelk = New Global.System.Data.DataColumn("Delk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelk)
            Me.columnSilmin = New Global.System.Data.DataColumn("Silmin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSilmin)
            Me.columnZas2 = New Global.System.Data.DataColumn("Zas2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZas2)
            Me.columnZas3 = New Global.System.Data.DataColumn("Zas3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZas3)
            Me.columnRang = New Global.System.Data.DataColumn("Rang", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRang)
            Me.columnRang2 = New Global.System.Data.DataColumn("Rang2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRang2)
            Me.columnRang3 = New Global.System.Data.DataColumn("Rang3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRang3)
            Me.columnBod = New Global.System.Data.DataColumn("Bod", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBod)
            Me.columnSek = New Global.System.Data.DataColumn("Sek", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSek)
            Me.columnDrc = New Global.System.Data.DataColumn("Drc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDrc)
            Me.columnOmg = New Global.System.Data.DataColumn("Omg", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOmg)
            Me.columnMag = New Global.System.Data.DataColumn("Mag", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMag)
            Me.columnHP = New Global.System.Data.DataColumn("HP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHP)
            Me.columnWeight = New Global.System.Data.DataColumn("Weight", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeight)
            Me.columnAweight = New Global.System.Data.DataColumn("Aweight", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAweight)
            Me.columnTyped = New Global.System.Data.DataColumn("Typed", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTyped)
            Me.columnDemon = New Global.System.Data.DataColumn("Demon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDemon)
            Me.columnEnch = New Global.System.Data.DataColumn("Ench", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnch)
            Me.columnBless = New Global.System.Data.DataColumn("Bless", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBless)
            Me.columnMaterial = New Global.System.Data.DataColumn("Material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial)
            Me.columnLooking = New Global.System.Data.DataColumn("Looking", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLooking)
            Me.columnSpec_powers = New Global.System.Data.DataColumn("Spec_powers", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpec_powers)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnDaily_MG = New Global.System.Data.DataColumn("Daily_MG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDaily_MG)
            Me.columnEP_SP = New Global.System.Data.DataColumn("EP_SP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEP_SP)
            Me.columnEP_SP_type = New Global.System.Data.DataColumn("EP_SP_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEP_SP_type)
            Me.columnRarity = New Global.System.Data.DataColumn("Rarity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRarity)
            Me.columnApp_price = New Global.System.Data.DataColumn("App_price", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApp_price)
            Me.columnSpelly = New Global.System.Data.DataColumn("Spelly", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpelly)
            Me.columnSkilly = New Global.System.Data.DataColumn("Skilly", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSkilly)
            Me.columnResky = New Global.System.Data.DataColumn("Resky", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResky)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewWeRow() As WeRow
            Return CType(Me.NewRow,WeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WeRowChangedEvent) Is Nothing) Then
                RaiseEvent WeRowChanged(Me, New WeRowChangeEvent(CType(e.Row,WeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WeRowChangingEvent) Is Nothing) Then
                RaiseEvent WeRowChanging(Me, New WeRowChangeEvent(CType(e.Row,WeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WeRowDeletedEvent) Is Nothing) Then
                RaiseEvent WeRowDeleted(Me, New WeRowChangeEvent(CType(e.Row,WeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WeRowDeletingEvent) Is Nothing) Then
                RaiseEvent WeRowDeleting(Me, New WeRowChangeEvent(CType(e.Row,WeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveWeRow(ByVal row As WeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As WETemp = New WETemp
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class WeRow
        Inherits Global.System.Data.DataRow
        
        Private tableWe As WeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWe = CType(Me.Table,WeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Double
            Get
                Try 
                    Return CType(Me(Me.tableWe.IDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Weap_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.Weap_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Weap_name' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.Weap_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Typeg() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.TypegColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Typeg' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.TypegColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Templatex() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.TemplatexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Templatex' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.TemplatexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zas() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.ZasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zas' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.ZasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pru() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.PruColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pru' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.PruColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Drt() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.DrtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Drt' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.DrtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nic() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.NicColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nic' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.NicColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OC() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.OCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OC' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.OCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ini() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.IniColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ini' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.IniColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Spec_dmg() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.Spec_dmgColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Spec_dmg' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.Spec_dmgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Delk() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.DelkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Delk' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.DelkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Silmin() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.SilminColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Silmin' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.SilminColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zas2() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.Zas2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zas2' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.Zas2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zas3() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.Zas3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Zas3' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.Zas3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rang() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.RangColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rang' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.RangColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rang2() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.Rang2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rang2' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.Rang2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rang3() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.Rang3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rang3' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.Rang3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bod() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.BodColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bod' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.BodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sek() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.SekColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sek' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.SekColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Drc() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.DrcColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Drc' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.DrcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Omg() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.OmgColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Omg' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.OmgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mag() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.MagColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Mag' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.MagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HP() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.HPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HP' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.HPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Weight() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.WeightColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Weight' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.WeightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aweight() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.AweightColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Aweight' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.AweightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Typed() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.TypedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Typed' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.TypedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Demon() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.DemonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Demon' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.DemonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ench() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.EnchColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ench' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.EnchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bless() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.BlessColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bless' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.BlessColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Material() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.MaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Material' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.MaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Looking() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.LookingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Looking' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.LookingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Spec_powers() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.Spec_powersColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Spec_powers' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.Spec_powersColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Daily_MG() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.Daily_MGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Daily_MG' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.Daily_MGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EP_SP() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.EP_SPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EP_SP' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.EP_SPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EP_SP_type() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.EP_SP_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EP_SP_type' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.EP_SP_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rarity() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.RarityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Rarity' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.RarityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property App_price() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.App_priceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'App_price' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.App_priceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Spelly() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.SpellyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Spelly' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.SpellyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Skilly() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.SkillyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Skilly' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.SkillyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Resky() As String
            Get
                Try 
                    Return CType(Me(Me.tableWe.ReskyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Resky' in table 'We' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWe.ReskyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableWe.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tableWe.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWeap_nameNull() As Boolean
            Return Me.IsNull(Me.tableWe.Weap_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWeap_nameNull()
            Me(Me.tableWe.Weap_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypegNull() As Boolean
            Return Me.IsNull(Me.tableWe.TypegColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypegNull()
            Me(Me.tableWe.TypegColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTemplatexNull() As Boolean
            Return Me.IsNull(Me.tableWe.TemplatexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTemplatexNull()
            Me(Me.tableWe.TemplatexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZasNull() As Boolean
            Return Me.IsNull(Me.tableWe.ZasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZasNull()
            Me(Me.tableWe.ZasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPruNull() As Boolean
            Return Me.IsNull(Me.tableWe.PruColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPruNull()
            Me(Me.tableWe.PruColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDrtNull() As Boolean
            Return Me.IsNull(Me.tableWe.DrtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDrtNull()
            Me(Me.tableWe.DrtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNicNull() As Boolean
            Return Me.IsNull(Me.tableWe.NicColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNicNull()
            Me(Me.tableWe.NicColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOCNull() As Boolean
            Return Me.IsNull(Me.tableWe.OCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOCNull()
            Me(Me.tableWe.OCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIniNull() As Boolean
            Return Me.IsNull(Me.tableWe.IniColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIniNull()
            Me(Me.tableWe.IniColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSpec_dmgNull() As Boolean
            Return Me.IsNull(Me.tableWe.Spec_dmgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSpec_dmgNull()
            Me(Me.tableWe.Spec_dmgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelkNull() As Boolean
            Return Me.IsNull(Me.tableWe.DelkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelkNull()
            Me(Me.tableWe.DelkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSilminNull() As Boolean
            Return Me.IsNull(Me.tableWe.SilminColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSilminNull()
            Me(Me.tableWe.SilminColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZas2Null() As Boolean
            Return Me.IsNull(Me.tableWe.Zas2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZas2Null()
            Me(Me.tableWe.Zas2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZas3Null() As Boolean
            Return Me.IsNull(Me.tableWe.Zas3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZas3Null()
            Me(Me.tableWe.Zas3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRangNull() As Boolean
            Return Me.IsNull(Me.tableWe.RangColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRangNull()
            Me(Me.tableWe.RangColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRang2Null() As Boolean
            Return Me.IsNull(Me.tableWe.Rang2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRang2Null()
            Me(Me.tableWe.Rang2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRang3Null() As Boolean
            Return Me.IsNull(Me.tableWe.Rang3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRang3Null()
            Me(Me.tableWe.Rang3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBodNull() As Boolean
            Return Me.IsNull(Me.tableWe.BodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBodNull()
            Me(Me.tableWe.BodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSekNull() As Boolean
            Return Me.IsNull(Me.tableWe.SekColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSekNull()
            Me(Me.tableWe.SekColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDrcNull() As Boolean
            Return Me.IsNull(Me.tableWe.DrcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDrcNull()
            Me(Me.tableWe.DrcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOmgNull() As Boolean
            Return Me.IsNull(Me.tableWe.OmgColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOmgNull()
            Me(Me.tableWe.OmgColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMagNull() As Boolean
            Return Me.IsNull(Me.tableWe.MagColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMagNull()
            Me(Me.tableWe.MagColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHPNull() As Boolean
            Return Me.IsNull(Me.tableWe.HPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHPNull()
            Me(Me.tableWe.HPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWeightNull() As Boolean
            Return Me.IsNull(Me.tableWe.WeightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWeightNull()
            Me(Me.tableWe.WeightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAweightNull() As Boolean
            Return Me.IsNull(Me.tableWe.AweightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAweightNull()
            Me(Me.tableWe.AweightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypedNull() As Boolean
            Return Me.IsNull(Me.tableWe.TypedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypedNull()
            Me(Me.tableWe.TypedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDemonNull() As Boolean
            Return Me.IsNull(Me.tableWe.DemonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDemonNull()
            Me(Me.tableWe.DemonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnchNull() As Boolean
            Return Me.IsNull(Me.tableWe.EnchColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnchNull()
            Me(Me.tableWe.EnchColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBlessNull() As Boolean
            Return Me.IsNull(Me.tableWe.BlessColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBlessNull()
            Me(Me.tableWe.BlessColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaterialNull() As Boolean
            Return Me.IsNull(Me.tableWe.MaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaterialNull()
            Me(Me.tableWe.MaterialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLookingNull() As Boolean
            Return Me.IsNull(Me.tableWe.LookingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLookingNull()
            Me(Me.tableWe.LookingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSpec_powersNull() As Boolean
            Return Me.IsNull(Me.tableWe.Spec_powersColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSpec_powersNull()
            Me(Me.tableWe.Spec_powersColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableWe.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tableWe.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDaily_MGNull() As Boolean
            Return Me.IsNull(Me.tableWe.Daily_MGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDaily_MGNull()
            Me(Me.tableWe.Daily_MGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEP_SPNull() As Boolean
            Return Me.IsNull(Me.tableWe.EP_SPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEP_SPNull()
            Me(Me.tableWe.EP_SPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEP_SP_typeNull() As Boolean
            Return Me.IsNull(Me.tableWe.EP_SP_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEP_SP_typeNull()
            Me(Me.tableWe.EP_SP_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRarityNull() As Boolean
            Return Me.IsNull(Me.tableWe.RarityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRarityNull()
            Me(Me.tableWe.RarityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsApp_priceNull() As Boolean
            Return Me.IsNull(Me.tableWe.App_priceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetApp_priceNull()
            Me(Me.tableWe.App_priceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSpellyNull() As Boolean
            Return Me.IsNull(Me.tableWe.SpellyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSpellyNull()
            Me(Me.tableWe.SpellyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSkillyNull() As Boolean
            Return Me.IsNull(Me.tableWe.SkillyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSkillyNull()
            Me(Me.tableWe.SkillyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReskyNull() As Boolean
            Return Me.IsNull(Me.tableWe.ReskyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReskyNull()
            Me(Me.tableWe.ReskyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class WeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As WeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As WeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
